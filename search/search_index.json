{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docker-buildpackage Documentation \u00b6 Docker-buildpackage is a tool for building Debian packages. See how it compares with opx-build . Tip Check out the changelog . Prerequisites \u00b6 Python 3.5+ Docker Install \u00b6 1 $ pip3 install --upgrade dbp To avoid installing into the global namespace, install into a virtualenv. 1 2 $ python3 -mvenv ~/.dbp && ~/.dbp/bin/pip install dbp $ export PATH = $PATH : $HOME /.dbp/bin Usage \u00b6 Clone any number of OpenSwitch repositories Build! 1 2 $ git clone https://github.com/open-switch/opx-logging $ dbp build dbp build runs an out-of-tree build and stores build artifacts in ./pool/ for easy publishing dbp shell launches an interactive bash shell in the development environment container dbp run starts a persistent container in the background dbp rm removes the persistent container from the background Tip dbp uses OpenSwitch apt sources 1 2 deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx if no other sources are specified. OpenSwitch Installer \u00b6 dbp can be used to build an OpenSwitch installer. 1 2 3 $ git clone https://github.com/open-switch/opx-onie-installer $ dbp shell -c 'opx_rel_pkgasm.py \\ -b opx-onie-installer/release_bp/OPX_dell_base_stretch.xml' Usage: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $ dbp shell -c 'opx_rel_pkgasm.py --help' usage: opx_rel_pkgasm.py [ -h ] -b B [ -n N ] [ -s S ] [ -v V ] [ --build-info BUILD_INFO ] [ --build-url BUILD_URL ] [ --vcs-url VCS_URL ] [ --vcs-revision VCS_REVISION ] [ -d DIST ] optional arguments: -h, --help show this help message and exit -b B specify location of release blue-print -n N specify build number of release -s S specify release number suffix -v V specify verbosity level --build-info BUILD_INFO specify location of build-info json output --build-url BUILD_URL --vcs-url VCS_URL --vcs-revision VCS_REVISION -d DIST, --dist DIST Distribution to build","title":"Home"},{"location":"#docker-buildpackage-documentation","text":"Docker-buildpackage is a tool for building Debian packages. See how it compares with opx-build . Tip Check out the changelog .","title":"Docker-buildpackage Documentation"},{"location":"#prerequisites","text":"Python 3.5+ Docker","title":"Prerequisites"},{"location":"#install","text":"1 $ pip3 install --upgrade dbp To avoid installing into the global namespace, install into a virtualenv. 1 2 $ python3 -mvenv ~/.dbp && ~/.dbp/bin/pip install dbp $ export PATH = $PATH : $HOME /.dbp/bin","title":"Install"},{"location":"#usage","text":"Clone any number of OpenSwitch repositories Build! 1 2 $ git clone https://github.com/open-switch/opx-logging $ dbp build dbp build runs an out-of-tree build and stores build artifacts in ./pool/ for easy publishing dbp shell launches an interactive bash shell in the development environment container dbp run starts a persistent container in the background dbp rm removes the persistent container from the background Tip dbp uses OpenSwitch apt sources 1 2 deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx if no other sources are specified.","title":"Usage"},{"location":"#openswitch-installer","text":"dbp can be used to build an OpenSwitch installer. 1 2 3 $ git clone https://github.com/open-switch/opx-onie-installer $ dbp shell -c 'opx_rel_pkgasm.py \\ -b opx-onie-installer/release_bp/OPX_dell_base_stretch.xml' Usage: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $ dbp shell -c 'opx_rel_pkgasm.py --help' usage: opx_rel_pkgasm.py [ -h ] -b B [ -n N ] [ -s S ] [ -v V ] [ --build-info BUILD_INFO ] [ --build-url BUILD_URL ] [ --vcs-url VCS_URL ] [ --vcs-revision VCS_REVISION ] [ -d DIST ] optional arguments: -h, --help show this help message and exit -b B specify location of release blue-print -n N specify build number of release -s S specify release number suffix -v V specify verbosity level --build-info BUILD_INFO specify location of build-info json output --build-url BUILD_URL --vcs-url VCS_URL --vcs-revision VCS_REVISION -d DIST, --dist DIST Distribution to build","title":"OpenSwitch Installer"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Calendar Versioning . Unreleased \u00b6 18.10.2 - 2018/10/10 \u00b6 Added \u00b6 --debug flag for building unstripped, unoptimized binaries. Sets DEB_BUILD_OPTIONS=\"nostrip noopt debug\" 18.10.1 - 2018/10/10 \u00b6 Added \u00b6 OPX Installer build support (see docs ) 18.10.0 - 2018/10/09 \u00b6 Added \u00b6 Changelog Documentation and docs site Changed \u00b6 Start using Calendar Versioning 0.7.1 - 2018/10/08 \u00b6 Added \u00b6 --no-extra-sources flag for testing fully-local builds Changed \u00b6 Default OPX apt sources are used if no extra sources are specified Extra source files now expect a .list suffix Docker images are not pulled if the --image flag contains a colon 0.6.1 - 2018/10/08 \u00b6 Changed \u00b6 Bump gbp-docker version to v1.0.5, which fixes lintian issues 0.6.0 - 2018/10/08 \u00b6 Added \u00b6 Controlgraph for resolving local build dependencies and the proper build order Removed \u00b6 Builddepends support 0.5.5 - 2018/09/12 \u00b6 Changed \u00b6 Upgrade gbp-docker to 1.0.3 0.5.4 - 2018/09/07 \u00b6 Added \u00b6 Progress bar when pulling Docker images 0.5.3 - 2018/09/06 \u00b6 Fixed \u00b6 Missing timezone and DEB email/name in container 0.5.2 - 2018/09/05 \u00b6 Changed \u00b6 Upgrade gbp-docker to 1.0.1 0.5.1 - 2018/09/05 \u00b6 Fixed \u00b6 Exception when ~/.gitconfig is missing 0.5.0 - 2018/09/04 \u00b6 Added \u00b6 Options for filtering isolated repositories when building 0.4.4 - 2018/09/04 \u00b6 Fixed \u00b6 Git-buildpackage option parsing 0.4.3 - 2018/09/04 \u00b6 Fixed \u00b6 Missing shell environment pieces due to non-login shell 0.4.2 - 2018/09/04 \u00b6 Fixed \u00b6 Duplicate bash -l in container command 0.4.1 - 2018/09/03 \u00b6 Fixed \u00b6 Missing user on container start 0.4.0 - 2018/09/02 \u00b6 Added \u00b6 Support for builddepends input 0.3.3 - 2018/08/29 \u00b6 Fixed \u00b6 Noisy output when starting/removing containers 0.3.2 - 2018/08/29 \u00b6 Fixed \u00b6 Missing bash arguments 0.3.1 - 2018/08/29 \u00b6 Added \u00b6 Everything","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Calendar Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#18102-20181010","text":"","title":"18.10.2 - 2018/10/10"},{"location":"changelog/#added","text":"--debug flag for building unstripped, unoptimized binaries. Sets DEB_BUILD_OPTIONS=\"nostrip noopt debug\"","title":"Added"},{"location":"changelog/#18101-20181010","text":"","title":"18.10.1 - 2018/10/10"},{"location":"changelog/#added_1","text":"OPX Installer build support (see docs )","title":"Added"},{"location":"changelog/#18100-20181009","text":"","title":"18.10.0 - 2018/10/09"},{"location":"changelog/#added_2","text":"Changelog Documentation and docs site","title":"Added"},{"location":"changelog/#changed","text":"Start using Calendar Versioning","title":"Changed"},{"location":"changelog/#071-20181008","text":"","title":"0.7.1 - 2018/10/08"},{"location":"changelog/#added_3","text":"--no-extra-sources flag for testing fully-local builds","title":"Added"},{"location":"changelog/#changed_1","text":"Default OPX apt sources are used if no extra sources are specified Extra source files now expect a .list suffix Docker images are not pulled if the --image flag contains a colon","title":"Changed"},{"location":"changelog/#061-20181008","text":"","title":"0.6.1 - 2018/10/08"},{"location":"changelog/#changed_2","text":"Bump gbp-docker version to v1.0.5, which fixes lintian issues","title":"Changed"},{"location":"changelog/#060-20181008","text":"","title":"0.6.0 - 2018/10/08"},{"location":"changelog/#added_4","text":"Controlgraph for resolving local build dependencies and the proper build order","title":"Added"},{"location":"changelog/#removed","text":"Builddepends support","title":"Removed"},{"location":"changelog/#055-20180912","text":"","title":"0.5.5 - 2018/09/12"},{"location":"changelog/#changed_3","text":"Upgrade gbp-docker to 1.0.3","title":"Changed"},{"location":"changelog/#054-20180907","text":"","title":"0.5.4 - 2018/09/07"},{"location":"changelog/#added_5","text":"Progress bar when pulling Docker images","title":"Added"},{"location":"changelog/#053-20180906","text":"","title":"0.5.3 - 2018/09/06"},{"location":"changelog/#fixed","text":"Missing timezone and DEB email/name in container","title":"Fixed"},{"location":"changelog/#052-20180905","text":"","title":"0.5.2 - 2018/09/05"},{"location":"changelog/#changed_4","text":"Upgrade gbp-docker to 1.0.1","title":"Changed"},{"location":"changelog/#051-20180905","text":"","title":"0.5.1 - 2018/09/05"},{"location":"changelog/#fixed_1","text":"Exception when ~/.gitconfig is missing","title":"Fixed"},{"location":"changelog/#050-20180904","text":"","title":"0.5.0 - 2018/09/04"},{"location":"changelog/#added_6","text":"Options for filtering isolated repositories when building","title":"Added"},{"location":"changelog/#044-20180904","text":"","title":"0.4.4 - 2018/09/04"},{"location":"changelog/#fixed_2","text":"Git-buildpackage option parsing","title":"Fixed"},{"location":"changelog/#043-20180904","text":"","title":"0.4.3 - 2018/09/04"},{"location":"changelog/#fixed_3","text":"Missing shell environment pieces due to non-login shell","title":"Fixed"},{"location":"changelog/#042-20180904","text":"","title":"0.4.2 - 2018/09/04"},{"location":"changelog/#fixed_4","text":"Duplicate bash -l in container command","title":"Fixed"},{"location":"changelog/#041-20180903","text":"","title":"0.4.1 - 2018/09/03"},{"location":"changelog/#fixed_5","text":"Missing user on container start","title":"Fixed"},{"location":"changelog/#040-20180902","text":"","title":"0.4.0 - 2018/09/02"},{"location":"changelog/#added_7","text":"Support for builddepends input","title":"Added"},{"location":"changelog/#033-20180829","text":"","title":"0.3.3 - 2018/08/29"},{"location":"changelog/#fixed_6","text":"Noisy output when starting/removing containers","title":"Fixed"},{"location":"changelog/#032-20180829","text":"","title":"0.3.2 - 2018/08/29"},{"location":"changelog/#fixed_7","text":"Missing bash arguments","title":"Fixed"},{"location":"changelog/#031-20180829","text":"","title":"0.3.1 - 2018/08/29"},{"location":"changelog/#added_8","text":"Everything","title":"Added"},{"location":"compares/","text":"Docker-buildpackage and opx-build \u00b6 dbp maintains some backwards compatibility with opx-build . opx_build does not work without pbuilder , and opx_run does not work without Docker-in-Docker. The installer/3.0.0 tag of opx-build is installed into /usr/local/opx-build and /usr/local/opx-build/scripts has been added to the $PATH . 1 2 $ dbp shell -c 'which opx_rel_pkgasm.py' /usr/local/opx-build/scripts/opx_rel_pkgasm.py Commands \u00b6 Build a single package 1 2 3 $ opx-build/scripts/opx_run opx_build src1 $ dbp build src1 Build all packages in a directory 1 2 3 $ opx-build/scripts/opx_run opx_build src1 src2 src3... $ dbp build Build an OPX installer 1 2 3 4 5 $ opx-build/scripts/opx_run opx_rel_pkgasm.py --dist stable \\ -b opx-onie-installer/release_bp/OPX_dell_base_stretch.xml $ dbp shell -c 'opx-build/scripts/opx_rel_pkgasm.py --dist stable \\ -b opx-onie-installer/release_bp/OPX_dell_base_stretch.xml' Speed \u00b6 This should definitely be better tested. 1 2 3 4 5 $ time opx-build/scripts/opx_run opx-build opx-logging opx-build/scripts/opx_run opx_build opx-logging 0 .05s user 0 .03s system 0 % cpu 3 :21.92 total $ time dbp build opx-logging dbp build opx-logging 0 .50s user 0 .16s system 1 % cpu 49 .015 total","title":"Comparison"},{"location":"compares/#docker-buildpackage-and-opx-build","text":"dbp maintains some backwards compatibility with opx-build . opx_build does not work without pbuilder , and opx_run does not work without Docker-in-Docker. The installer/3.0.0 tag of opx-build is installed into /usr/local/opx-build and /usr/local/opx-build/scripts has been added to the $PATH . 1 2 $ dbp shell -c 'which opx_rel_pkgasm.py' /usr/local/opx-build/scripts/opx_rel_pkgasm.py","title":"Docker-buildpackage and opx-build"},{"location":"compares/#commands","text":"Build a single package 1 2 3 $ opx-build/scripts/opx_run opx_build src1 $ dbp build src1 Build all packages in a directory 1 2 3 $ opx-build/scripts/opx_run opx_build src1 src2 src3... $ dbp build Build an OPX installer 1 2 3 4 5 $ opx-build/scripts/opx_run opx_rel_pkgasm.py --dist stable \\ -b opx-onie-installer/release_bp/OPX_dell_base_stretch.xml $ dbp shell -c 'opx-build/scripts/opx_rel_pkgasm.py --dist stable \\ -b opx-onie-installer/release_bp/OPX_dell_base_stretch.xml'","title":"Commands"},{"location":"compares/#speed","text":"This should definitely be better tested. 1 2 3 4 5 $ time opx-build/scripts/opx_run opx-build opx-logging opx-build/scripts/opx_run opx_build opx-logging 0 .05s user 0 .03s system 0 % cpu 3 :21.92 total $ time dbp build opx-logging dbp build opx-logging 0 .50s user 0 .16s system 1 % cpu 49 .015 total","title":"Speed"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 What is happening with opx-build? \u00b6 OpenSwitch will continue to support the opx_build script from the opx-build repository for building OPX Debian packages and the OPX installer. opx-build currently supports building Debian packages for both Debian Jessie and Debian Stretch. Tip opx-build will be continue to be supported as long as OPX ships on Debian Stretch. How do I generate a debian/changelog entry? \u00b6 1 $ dbp shell -c \"cd src/; gbp dch -R\" An editor will be opened where you can edit the changelog entry. Simply commit the changes and raise a pull request! What is the build program? \u00b6 build is a simple shell script which cd s into the source directory and runs gbp buildpackage with the --git-export-dir flag. This sorts build artifacts into per-source package directories. 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env bash set -euo pipefail if [[ $# -gt 0 ]] ; then cd \" $1 \" NAME = \" $1 \" shift else NAME = \" $( basename \" $( pwd ) \" ) \" fi gbp buildpackage --git-export-dir = \"/mnt/pool/ ${ DIST } - ${ ARCH } / ${ NAME } \" \" $@ \" What is the install-build-deps program? \u00b6 install-build-deps is a shell script which indexes local packages, adds your extra sources, then installs build dependencies. It is run automatically when using gbp buildpackage or build . Skip running it with dbp build --gbp=\"--git-prebuild=':'\" . Why am I receiving unable to find user build ? \u00b6 Docker could be too slow (or it could be storage). Either way, the container is taking too long to start. Try running dbp run first before running a build or shell.","title":"FAQs"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#what-is-happening-with-opx-build","text":"OpenSwitch will continue to support the opx_build script from the opx-build repository for building OPX Debian packages and the OPX installer. opx-build currently supports building Debian packages for both Debian Jessie and Debian Stretch. Tip opx-build will be continue to be supported as long as OPX ships on Debian Stretch.","title":"What is happening with opx-build?"},{"location":"faq/#how-do-i-generate-a-debianchangelog-entry","text":"1 $ dbp shell -c \"cd src/; gbp dch -R\" An editor will be opened where you can edit the changelog entry. Simply commit the changes and raise a pull request!","title":"How do I generate a debian/changelog entry?"},{"location":"faq/#what-is-the-build-program","text":"build is a simple shell script which cd s into the source directory and runs gbp buildpackage with the --git-export-dir flag. This sorts build artifacts into per-source package directories. 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env bash set -euo pipefail if [[ $# -gt 0 ]] ; then cd \" $1 \" NAME = \" $1 \" shift else NAME = \" $( basename \" $( pwd ) \" ) \" fi gbp buildpackage --git-export-dir = \"/mnt/pool/ ${ DIST } - ${ ARCH } / ${ NAME } \" \" $@ \"","title":"What is the build program?"},{"location":"faq/#what-is-the-install-build-deps-program","text":"install-build-deps is a shell script which indexes local packages, adds your extra sources, then installs build dependencies. It is run automatically when using gbp buildpackage or build . Skip running it with dbp build --gbp=\"--git-prebuild=':'\" .","title":"What is the install-build-deps program?"},{"location":"faq/#why-am-i-receiving-unable-to-find-user-build","text":"Docker could be too slow (or it could be storage). Either way, the container is taking too long to start. Try running dbp run first before running a build or shell.","title":"Why am I receiving unable to find user build?"},{"location":"commands/build/","text":"Commands: dbp build \u00b6 Out of the box, dbp build reads all directories and builds a graph of Debian build dependencies, which it traverses while building each Debian package. These packages are sorted into a pool and used for subsequent builds and ultimately publishing. Build a single package in a non-persistent container \u00b6 1 $ dbp build src/ Builds artifacts for the default Debian distribution Uses packages found in ./pool/stretch-amd64 as build dependencies Deposits artifacts in ./pool/stretch-amd64/src/ If workspace container does not exist, a container is created for this build and destroyed after If the workspace container already exists, it is used for the build and not destroyed after Build multiple repositories \u00b6 With no directories specified, dbp will build in build dependency order. 1 $ dbp build Otherwise, directories can be manually specified. 1 $ dbp build src new-src amazing-src Building unstripped and unoptimized binaries \u00b6 Use the --debug flag with dbp build or dbp shell . If already in a shell session, just run export DEB_BUILD_OPTIONS='nostrip noopt debug' . It works with build , gbp buildpackage , and even fakeroot debian/rules binary . Without --debug : 1 2 3 4 5 6 7 8 9 10 11 12 build@stretch:/mnt$ ll pool/stretch-amd64/opx-logging | awk '{print $5, $9}' | column -t 13K libopx-logging-dev_2.1.1_amd64.deb 85K libopx-logging1-dbgsym_2.1.1_amd64.deb 10K libopx-logging1_2.1.1_amd64.deb 905 opx-logging_2.1.1.dsc 12K opx-logging_2.1.1.tar.gz 28K opx-logging_2.1.1_amd64.build 6 .9K opx-logging_2.1.1_amd64.buildinfo 3 .1K opx-logging_2.1.1_amd64.changes 3 .6K opx-logging_2.1.1_amd64.deb 12K python-opx-logging-dbgsym_2.1.1_amd64.deb 4 .2K python-opx-logging_2.1.1_amd64.deb With --debug : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ dbp --debug shell build@stretch:/mnt$ echo \"Options: $DEB_BUILD_OPTIONS \" Options: nostrip noopt debug build@stretch:/mnt$ build opx-logging build@stretch:/mnt$ ll pool/stretch-amd64/opx-logging | awk '{print $5, $9}' | column -t 93K libopx-logging-dev_2.1.1_amd64.deb 85K libopx-logging1_2.1.1_amd64.deb 905 opx-logging_2.1.1.dsc 12K opx-logging_2.1.1.tar.gz 28K opx-logging_2.1.1_amd64.build 6 .4K opx-logging_2.1.1_amd64.buildinfo 2 .6K opx-logging_2.1.1_amd64.changes 3 .6K opx-logging_2.1.1_amd64.deb 12K python-opx-logging_2.1.1_amd64.deb Build against an OPX release \u00b6 1 $ dbp --release 3 .0.0 build Build against a Debian distribution \u00b6 1 $ dbp --dist bionic build Build against extra apt sources \u00b6 dbp will read from the following list of inputs for extra apt sources. These sources must be in standard sources.list format. --extra-sources argument EXTRA_SOURCES environment variable ./.extra_sources.list file ~/.extra_sources.list file For example, fill ~/.extra_sources.list with 1 2 deb http://deb.openswitch.net/stretch stable opx opx-non-free deb-src http://deb.openswitch.net/stretch stable opx and dbp build will search OpenSwitch for build dependencies. 1 2 3 4 $ dbp -v build src INFO:dbp:Loaded extra sources: deb http://deb.openswitch.net/stretch stable opx opx-non-free deb-src http://deb.openswitch.net/stretch stable opx If no sources are found, the default OPX sources are used. Exclude custom apt sources \u00b6 Also excludes default OPX sources. Useful for ensuring a complete local build is possible. 1 $ dbp --no-extra-sources build Pass additional git-buildpackage options \u00b6 For example, skip building when tagging by passing the correct flag. 1 dbp build src --gbp = \"--git-tag-only\" Build in (more) parallel \u00b6 You can override the default parallel level with a build option. Set N to any number >0. 1 DEB_BUILD_OPTIONS = 'parallel=N'","title":"Build"},{"location":"commands/build/#commands-dbp-build","text":"Out of the box, dbp build reads all directories and builds a graph of Debian build dependencies, which it traverses while building each Debian package. These packages are sorted into a pool and used for subsequent builds and ultimately publishing.","title":"Commands: dbp build"},{"location":"commands/build/#build-a-single-package-in-a-non-persistent-container","text":"1 $ dbp build src/ Builds artifacts for the default Debian distribution Uses packages found in ./pool/stretch-amd64 as build dependencies Deposits artifacts in ./pool/stretch-amd64/src/ If workspace container does not exist, a container is created for this build and destroyed after If the workspace container already exists, it is used for the build and not destroyed after","title":"Build a single package in a non-persistent container"},{"location":"commands/build/#build-multiple-repositories","text":"With no directories specified, dbp will build in build dependency order. 1 $ dbp build Otherwise, directories can be manually specified. 1 $ dbp build src new-src amazing-src","title":"Build multiple repositories"},{"location":"commands/build/#building-unstripped-and-unoptimized-binaries","text":"Use the --debug flag with dbp build or dbp shell . If already in a shell session, just run export DEB_BUILD_OPTIONS='nostrip noopt debug' . It works with build , gbp buildpackage , and even fakeroot debian/rules binary . Without --debug : 1 2 3 4 5 6 7 8 9 10 11 12 build@stretch:/mnt$ ll pool/stretch-amd64/opx-logging | awk '{print $5, $9}' | column -t 13K libopx-logging-dev_2.1.1_amd64.deb 85K libopx-logging1-dbgsym_2.1.1_amd64.deb 10K libopx-logging1_2.1.1_amd64.deb 905 opx-logging_2.1.1.dsc 12K opx-logging_2.1.1.tar.gz 28K opx-logging_2.1.1_amd64.build 6 .9K opx-logging_2.1.1_amd64.buildinfo 3 .1K opx-logging_2.1.1_amd64.changes 3 .6K opx-logging_2.1.1_amd64.deb 12K python-opx-logging-dbgsym_2.1.1_amd64.deb 4 .2K python-opx-logging_2.1.1_amd64.deb With --debug : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ dbp --debug shell build@stretch:/mnt$ echo \"Options: $DEB_BUILD_OPTIONS \" Options: nostrip noopt debug build@stretch:/mnt$ build opx-logging build@stretch:/mnt$ ll pool/stretch-amd64/opx-logging | awk '{print $5, $9}' | column -t 93K libopx-logging-dev_2.1.1_amd64.deb 85K libopx-logging1_2.1.1_amd64.deb 905 opx-logging_2.1.1.dsc 12K opx-logging_2.1.1.tar.gz 28K opx-logging_2.1.1_amd64.build 6 .4K opx-logging_2.1.1_amd64.buildinfo 2 .6K opx-logging_2.1.1_amd64.changes 3 .6K opx-logging_2.1.1_amd64.deb 12K python-opx-logging_2.1.1_amd64.deb","title":"Building unstripped and unoptimized binaries"},{"location":"commands/build/#build-against-an-opx-release","text":"1 $ dbp --release 3 .0.0 build","title":"Build against an OPX release"},{"location":"commands/build/#build-against-a-debian-distribution","text":"1 $ dbp --dist bionic build","title":"Build against a Debian distribution"},{"location":"commands/build/#build-against-extra-apt-sources","text":"dbp will read from the following list of inputs for extra apt sources. These sources must be in standard sources.list format. --extra-sources argument EXTRA_SOURCES environment variable ./.extra_sources.list file ~/.extra_sources.list file For example, fill ~/.extra_sources.list with 1 2 deb http://deb.openswitch.net/stretch stable opx opx-non-free deb-src http://deb.openswitch.net/stretch stable opx and dbp build will search OpenSwitch for build dependencies. 1 2 3 4 $ dbp -v build src INFO:dbp:Loaded extra sources: deb http://deb.openswitch.net/stretch stable opx opx-non-free deb-src http://deb.openswitch.net/stretch stable opx If no sources are found, the default OPX sources are used.","title":"Build against extra apt sources"},{"location":"commands/build/#exclude-custom-apt-sources","text":"Also excludes default OPX sources. Useful for ensuring a complete local build is possible. 1 $ dbp --no-extra-sources build","title":"Exclude custom apt sources"},{"location":"commands/build/#pass-additional-git-buildpackage-options","text":"For example, skip building when tagging by passing the correct flag. 1 dbp build src --gbp = \"--git-tag-only\"","title":"Pass additional git-buildpackage options"},{"location":"commands/build/#build-in-more-parallel","text":"You can override the default parallel level with a build option. Set N to any number >0. 1 DEB_BUILD_OPTIONS = 'parallel=N'","title":"Build in (more) parallel"},{"location":"commands/rm/","text":"Commands: dbp rm \u00b6 dbp rm removes and container started by dbp run from the same directory. If no container exists, nothing is done. 1 2 3 4 5 6 7 $ dbp -vv rm [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker rm -f theucke-dbp-dbp","title":"Rm"},{"location":"commands/rm/#commands-dbp-rm","text":"dbp rm removes and container started by dbp run from the same directory. If no container exists, nothing is done. 1 2 3 4 5 6 7 $ dbp -vv rm [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker rm -f theucke-dbp-dbp","title":"Commands: dbp rm"},{"location":"commands/run/","text":"Commands: dbp run \u00b6 dbp run creates and starts a development container that can be used by both dbp build and dbp shell . It must be manually removed with dbp rm . 1 2 3 4 5 6 7 8 9 $ dbp -vv run [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker run -d -it --name = theucke-dbp-dbp --hostname = stretch -v = /neteng/theucke/opx/dbp:/mnt -v = /home/theucke/.gitconfig:/etc/skel/.gitconfig:ro -e = UID = 9438 -e = GID = 3000 -e = TZ = US/Pacific-New -e = DEBFULLNAME = Dell EMC -e = DEBEMAIL = ops-dev@lists.openswitch.net -e = EXTRA_SOURCES = deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx opxhub/gbp:v1.0.5-stretch-dev bash -l","title":"Run"},{"location":"commands/run/#commands-dbp-run","text":"dbp run creates and starts a development container that can be used by both dbp build and dbp shell . It must be manually removed with dbp rm . 1 2 3 4 5 6 7 8 9 $ dbp -vv run [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker run -d -it --name = theucke-dbp-dbp --hostname = stretch -v = /neteng/theucke/opx/dbp:/mnt -v = /home/theucke/.gitconfig:/etc/skel/.gitconfig:ro -e = UID = 9438 -e = GID = 3000 -e = TZ = US/Pacific-New -e = DEBFULLNAME = Dell EMC -e = DEBEMAIL = ops-dev@lists.openswitch.net -e = EXTRA_SOURCES = deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx opxhub/gbp:v1.0.5-stretch-dev bash -l","title":"Commands: dbp run"},{"location":"commands/shell/","text":"Commands: dbp shell \u00b6 dbp shell launches an interactive shell in a Debian development environment. This environment is provided by opx-infra/gbp-docker . If a container were previously launched with dbp run in the same directory, dbp shell would launch the shell in the existing container. This existing container is not removed when the shell exits. If no container exists, a new container is created and then destroyed after. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ dbp -vv shell [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker run -d -it --name = theucke-dbp-dbp --hostname = stretch -v = /neteng/theucke/opx/dbp:/mnt -v = /home/theucke/.gitconfig:/etc/skel/.gitconfig:ro -e = UID = 9438 -e = GID = 3000 -e = TZ = US/Pacific-New -e = DEBFULLNAME = Dell EMC -e = DEBEMAIL = ops-dev@lists.openswitch.net -e = EXTRA_SOURCES = deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx opxhub/gbp:v1.0.5-stretch-dev bash -l [ DEBUG ] Running docker exec -it --user = build -e = UID = 9438 -e = GID = 3000 -e = TZ = US/Pacific-New -e = DEBFULLNAME = Dell EMC -e = DEBEMAIL = ops-dev@lists.openswitch.net -e = EXTRA_SOURCES = deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx theucke-dbp-dbp bash -l build@stretch:/mnt$ exit logout [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker rm -f theucke-dbp-dbp Develop inside a persistent development container \u00b6 Using dbp run launches a persistent development container. This container will only be explicitly removed when dbp rm is run in the same directory. You can use dbp shell to enter this container, or dbp shell -c 'cmd' to run a command non-interactively. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 dbp run dbp shell # Now we are inside the container (denoted by $ prompt) $ cd src/ # Install build dependencies and build the package $ gbp buildpackage # Only install build dependencies $ install-build-deps # On failed builds, avoid the long gbp build time by quickly rebuilding $ fakeroot debian/rules build # Manually clean up $ fakeroot debian/rules clean # Add a new source for build dependencies by appending to the env var $ export EXTRA_SOURCES = \" $EXTRA_SOURCES deb http://deb.openswitch.net/stretch 3.0.0 opx opx-non-free\" # Run gbp buildpackage again to do a clean build, but this time skip installing build deps $ gbp buildpackage --git-prebuild = ':' # Run an \"official\" build (what the CI runs) $ cd /mnt $ build src # Build an unstripped, unoptimized binary (this also works with gbp and debian/rules) $ DEB_BUILD_OPTIONS = 'nostrip noopt debug' build src # Exit the container $ exit # Remove the container when finished (or use `dbp shell/build` again to re-enter the same container) dbp rm Note Packages are only indexed for build dependencies in pool/ ${ DIST } - ${ ARCH } / . Building with build ./src automatically deposits build artifacts into the correct directory for indexing. You can also simply copy .deb files into the directory.","title":"Shell"},{"location":"commands/shell/#commands-dbp-shell","text":"dbp shell launches an interactive shell in a Debian development environment. This environment is provided by opx-infra/gbp-docker . If a container were previously launched with dbp run in the same directory, dbp shell would launch the shell in the existing container. This existing container is not removed when the shell exits. If no container exists, a new container is created and then destroyed after. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ dbp -vv shell [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker run -d -it --name = theucke-dbp-dbp --hostname = stretch -v = /neteng/theucke/opx/dbp:/mnt -v = /home/theucke/.gitconfig:/etc/skel/.gitconfig:ro -e = UID = 9438 -e = GID = 3000 -e = TZ = US/Pacific-New -e = DEBFULLNAME = Dell EMC -e = DEBEMAIL = ops-dev@lists.openswitch.net -e = EXTRA_SOURCES = deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx opxhub/gbp:v1.0.5-stretch-dev bash -l [ DEBUG ] Running docker exec -it --user = build -e = UID = 9438 -e = GID = 3000 -e = TZ = US/Pacific-New -e = DEBFULLNAME = Dell EMC -e = DEBEMAIL = ops-dev@lists.openswitch.net -e = EXTRA_SOURCES = deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx theucke-dbp-dbp bash -l build@stretch:/mnt$ exit logout [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker rm -f theucke-dbp-dbp","title":"Commands: dbp shell"},{"location":"commands/shell/#develop-inside-a-persistent-development-container","text":"Using dbp run launches a persistent development container. This container will only be explicitly removed when dbp rm is run in the same directory. You can use dbp shell to enter this container, or dbp shell -c 'cmd' to run a command non-interactively. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 dbp run dbp shell # Now we are inside the container (denoted by $ prompt) $ cd src/ # Install build dependencies and build the package $ gbp buildpackage # Only install build dependencies $ install-build-deps # On failed builds, avoid the long gbp build time by quickly rebuilding $ fakeroot debian/rules build # Manually clean up $ fakeroot debian/rules clean # Add a new source for build dependencies by appending to the env var $ export EXTRA_SOURCES = \" $EXTRA_SOURCES deb http://deb.openswitch.net/stretch 3.0.0 opx opx-non-free\" # Run gbp buildpackage again to do a clean build, but this time skip installing build deps $ gbp buildpackage --git-prebuild = ':' # Run an \"official\" build (what the CI runs) $ cd /mnt $ build src # Build an unstripped, unoptimized binary (this also works with gbp and debian/rules) $ DEB_BUILD_OPTIONS = 'nostrip noopt debug' build src # Exit the container $ exit # Remove the container when finished (or use `dbp shell/build` again to re-enter the same container) dbp rm Note Packages are only indexed for build dependencies in pool/ ${ DIST } - ${ ARCH } / . Building with build ./src automatically deposits build artifacts into the correct directory for indexing. You can also simply copy .deb files into the directory.","title":"Develop inside a persistent development container"}]}