{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docker-buildpackage Documentation \u00b6 Docker-buildpackage is a tool for managing OpenSwitch development environments and building OpenSwitch Debian packages. Installation \u00b6 1 $ pip3 install --upgrade dbp For more information, see installation . Usage \u00b6 Building packages Building ONIE installers More information \u00b6 Comparison with opx-build Apt sources and you Forking from an upstream Frequently asked questions","title":"Home"},{"location":"#docker-buildpackage-documentation","text":"Docker-buildpackage is a tool for managing OpenSwitch development environments and building OpenSwitch Debian packages.","title":"Docker-buildpackage Documentation"},{"location":"#installation","text":"1 $ pip3 install --upgrade dbp For more information, see installation .","title":"Installation"},{"location":"#usage","text":"Building packages Building ONIE installers","title":"Usage"},{"location":"#more-information","text":"Comparison with opx-build Apt sources and you Forking from an upstream Frequently asked questions","title":"More information"},{"location":"apt-sources/","text":"Apt Sources \u00b6 dbp supports OpenSwitch's own Apt sources, along with any custom Apt sources required. dbp always gives priority to locally built packages, even if the version is lower. OpenSwitch Apt sources \u00b6 dbp loads OpenSwitch apt sources into /etc/apt/sources.list.d/20extra.list if no other sources are specified. 1 2 3 4 $ dbp -v build [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx Using the --dist flag modifies stretch in the above list, while using the --release flag modifies unstable . 1 2 3 4 $ dbp --dist bionic --release stable -v build [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/bionic stable opx opx-non-free deb-src http://deb.openswitch.net/bionic stable opx Using the --no-extra-sources flag removes these sources entirely. Custom Apt sources \u00b6 There are many ways to specify custom Apt sources. In order of precedence: The --extra-sources flag The $EXTRA_SOURCES environment variable The ./extra_sources.list file The $HOME/.extra_sources.list file For example, fill ~/.extra_sources.list with 1 deb http://deb.notarealsite.net/ sid main and dbp will use it. 1 2 3 $ dbp -v build [ INFO ] Loaded extra sources: deb http://deb.notarealsite.net/ sid main","title":"Apt Sources"},{"location":"apt-sources/#apt-sources","text":"dbp supports OpenSwitch's own Apt sources, along with any custom Apt sources required. dbp always gives priority to locally built packages, even if the version is lower.","title":"Apt Sources"},{"location":"apt-sources/#openswitch-apt-sources","text":"dbp loads OpenSwitch apt sources into /etc/apt/sources.list.d/20extra.list if no other sources are specified. 1 2 3 4 $ dbp -v build [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx Using the --dist flag modifies stretch in the above list, while using the --release flag modifies unstable . 1 2 3 4 $ dbp --dist bionic --release stable -v build [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/bionic stable opx opx-non-free deb-src http://deb.openswitch.net/bionic stable opx Using the --no-extra-sources flag removes these sources entirely.","title":"OpenSwitch Apt sources"},{"location":"apt-sources/#custom-apt-sources","text":"There are many ways to specify custom Apt sources. In order of precedence: The --extra-sources flag The $EXTRA_SOURCES environment variable The ./extra_sources.list file The $HOME/.extra_sources.list file For example, fill ~/.extra_sources.list with 1 deb http://deb.notarealsite.net/ sid main and dbp will use it. 1 2 3 $ dbp -v build [ INFO ] Loaded extra sources: deb http://deb.notarealsite.net/ sid main","title":"Custom Apt sources"},{"location":"build-installers/","text":"Building ONIE Installers \u00b6 opx-build is used for building ONIE installers. It is pre-installed in the development environment. 1 2 3 4 5 6 # Clone installer blueprint $ git clone https://github.com/open-switch/opx-onie-installer # Run installer builder script in container $ dbp shell -c 'opx_rel_pkgasm.py \\ -b opx-onie-installer/release_bp/OPX_dell_base_stretch.xml' Usage \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 usage: opx_rel_pkgasm.py [ -h ] -b B [ -n N ] [ -s S ] [ -v V ] [ --build-info BUILD_INFO ] [ --build-url BUILD_URL ] [ --vcs-url VCS_URL ] [ --vcs-revision VCS_REVISION ] [ -d DIST ] optional arguments: -h, --help show this help message and exit -b B specify location of release blue-print -n N specify build number of release -s S specify release number suffix -v V specify verbosity level --build-info BUILD_INFO specify location of build-info json output --build-url BUILD_URL --vcs-url VCS_URL --vcs-revision VCS_REVISION -d DIST, --dist DIST Distribution to build","title":"Building installers"},{"location":"build-installers/#building-onie-installers","text":"opx-build is used for building ONIE installers. It is pre-installed in the development environment. 1 2 3 4 5 6 # Clone installer blueprint $ git clone https://github.com/open-switch/opx-onie-installer # Run installer builder script in container $ dbp shell -c 'opx_rel_pkgasm.py \\ -b opx-onie-installer/release_bp/OPX_dell_base_stretch.xml'","title":"Building ONIE Installers"},{"location":"build-installers/#usage","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 usage: opx_rel_pkgasm.py [ -h ] -b B [ -n N ] [ -s S ] [ -v V ] [ --build-info BUILD_INFO ] [ --build-url BUILD_URL ] [ --vcs-url VCS_URL ] [ --vcs-revision VCS_REVISION ] [ -d DIST ] optional arguments: -h, --help show this help message and exit -b B specify location of release blue-print -n N specify build number of release -s S specify release number suffix -v V specify verbosity level --build-info BUILD_INFO specify location of build-info json output --build-url BUILD_URL --vcs-url VCS_URL --vcs-revision VCS_REVISION -d DIST, --dist DIST Distribution to build","title":"Usage"},{"location":"build-packages/","text":"Building OpenSwitch packages \u00b6 Docker-buildpackage supports both interactive and non-interactive package builds. For this page, assume the following workspace is present. 1 2 $ git clone https://github.com/open-switch/opx-logging $ git clone https://github.com/open-switch/opx-common-utils Non-interactive package builds \u00b6 Build specific repositories by naming them. 1 $ dbp build opx-logging Packages will be deposited in your workspace after a successful build. Use pool-packages to pool packages into per-repository directories for easy sharing. 1 2 3 4 5 $ ls *.changes opx-logging_2.1.1_amd64.changes $ dbp shell -c 'pool-packages *.changes' $ ls pool/stretch-amd64/opx-logging/*.changes pool/stretch-amd64/opx-logging/opx-logging_2.1.1_amd64.changes Use dbp build without any arguments to build a full workspace serially. This runs cd $repo; gbp buildpackage for each repository with a debian/control file. 1 $ dbp build The --print-targets flag can be used to preview the build order. 1 2 $ dbp build --print-targets opx-logging opx-common-utils To build in parallel, use the makefile subcommand. 1 dbp makefile >Makefile && make -j Interactive package builds \u00b6 When developing a package, use dbp run to launch a persistent development container in the background. It can then be entered with dbp shell and removed with dbp rm . 1 2 3 $ dbp run $ dbp shell $ dbp rm Tip Running dbp build opx-logging is functionally equivalent to 1 $ dbp shell -c 'cd opx-logging; gbp buildpackage' Running dbp shell launches a Bash session, where the standard Debian workflow is available. 1 2 3 4 5 6 7 8 9 10 11 12 $ dbp shell build@stretch:/mnt$ cd opx-logging # Install build dependencies and build the package build@stretch:/mnt/opx-logging$ gbp buildpackage # On failed builds, avoid the long gbp build time by quickly rebuilding build@stretch:/mnt/opx-logging$ fakeroot debian/rules binary # Manually clean up build@stretch:/mnt/opx-logging$ fakeroot debian/rules clean build@stretch:/mnt/opx-logging$ exit dbp run creates a container based on the current user and directory. To always use the same container name (or start a shell in someone else's), use the --cname environment variable. 1 2 3 4 5 $ dbp rm Starting container user-dbp-demo... $ dbp --cname DEMO rm Starting container DEMO... Debug builds \u00b6 Build unstripped, unoptimized packages with the --debug flag. Both dbp shell and dbp build support it. 1 2 $ dbp --debug build opx-logging $ dbp --debug shell -c 'cd opx-logging; gbp buildpackage' Pass additional Git-buildpackage options \u00b6 Use the --gbp flag with dbp build . 1 dbp build opx-logging --gbp = \"--git-tag-only\"","title":"Building packages"},{"location":"build-packages/#building-openswitch-packages","text":"Docker-buildpackage supports both interactive and non-interactive package builds. For this page, assume the following workspace is present. 1 2 $ git clone https://github.com/open-switch/opx-logging $ git clone https://github.com/open-switch/opx-common-utils","title":"Building OpenSwitch packages"},{"location":"build-packages/#non-interactive-package-builds","text":"Build specific repositories by naming them. 1 $ dbp build opx-logging Packages will be deposited in your workspace after a successful build. Use pool-packages to pool packages into per-repository directories for easy sharing. 1 2 3 4 5 $ ls *.changes opx-logging_2.1.1_amd64.changes $ dbp shell -c 'pool-packages *.changes' $ ls pool/stretch-amd64/opx-logging/*.changes pool/stretch-amd64/opx-logging/opx-logging_2.1.1_amd64.changes Use dbp build without any arguments to build a full workspace serially. This runs cd $repo; gbp buildpackage for each repository with a debian/control file. 1 $ dbp build The --print-targets flag can be used to preview the build order. 1 2 $ dbp build --print-targets opx-logging opx-common-utils To build in parallel, use the makefile subcommand. 1 dbp makefile >Makefile && make -j","title":"Non-interactive package builds"},{"location":"build-packages/#interactive-package-builds","text":"When developing a package, use dbp run to launch a persistent development container in the background. It can then be entered with dbp shell and removed with dbp rm . 1 2 3 $ dbp run $ dbp shell $ dbp rm Tip Running dbp build opx-logging is functionally equivalent to 1 $ dbp shell -c 'cd opx-logging; gbp buildpackage' Running dbp shell launches a Bash session, where the standard Debian workflow is available. 1 2 3 4 5 6 7 8 9 10 11 12 $ dbp shell build@stretch:/mnt$ cd opx-logging # Install build dependencies and build the package build@stretch:/mnt/opx-logging$ gbp buildpackage # On failed builds, avoid the long gbp build time by quickly rebuilding build@stretch:/mnt/opx-logging$ fakeroot debian/rules binary # Manually clean up build@stretch:/mnt/opx-logging$ fakeroot debian/rules clean build@stretch:/mnt/opx-logging$ exit dbp run creates a container based on the current user and directory. To always use the same container name (or start a shell in someone else's), use the --cname environment variable. 1 2 3 4 5 $ dbp rm Starting container user-dbp-demo... $ dbp --cname DEMO rm Starting container DEMO...","title":"Interactive package builds"},{"location":"build-packages/#debug-builds","text":"Build unstripped, unoptimized packages with the --debug flag. Both dbp shell and dbp build support it. 1 2 $ dbp --debug build opx-logging $ dbp --debug shell -c 'cd opx-logging; gbp buildpackage'","title":"Debug builds"},{"location":"build-packages/#pass-additional-git-buildpackage-options","text":"Use the --gbp flag with dbp build . 1 dbp build opx-logging --gbp = \"--git-tag-only\"","title":"Pass additional Git-buildpackage options"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Calendar Versioning . Unreleased \u00b6 18.12.1 - 2018/12/12 \u00b6 Changed \u00b6 Docker entrypoint is run directly on shell/build Fixed \u00b6 Missing user build 18.11.5 - 2018/11/29 \u00b6 Changed \u00b6 opx-build has been upgraded from installer/3.0.0 to installer/3.1.0 18.11.4 - 2018/11/26 \u00b6 Added \u00b6 Option to always remove any running container first Changed \u00b6 Dbp log messages now to go stderr Use full name of directory for container name, not stem Fixed \u00b6 Missing user in container at runtime dbp shell returning 0 on error 18.11.3 - 2018/11/19 \u00b6 Fixed \u00b6 Running command before container and user are ready Removed \u00b6 Isolate ordering options for dbp build 18.11.2 - 2018/11/12 \u00b6 Added \u00b6 Subcommand for creating parallel Makefile Changed \u00b6 debuild is only run for 3.0 (git) packages Shell process ID has been removed from container name Fixed \u00b6 Missing source tarball (now gbp buildpackage will run) dbp build and dbp shell now work from within repositories (not just the workspace) 18.11.1 - 2018/11/07 \u00b6 Changed \u00b6 dbp build now runs debuild instead of gbp buildpackage to better support 3.0 (git) packages Fixed \u00b6 Return code of 0 on failed builds instead of !0 18.11.0 - 2018/11/03 \u00b6 Fixed \u00b6 \"the input device is not a TTY\" Docker run and exec error 18.10.7 - 2018/10/31 \u00b6 Added \u00b6 Ability to set container name with $CNAME environment variable Changed \u00b6 Local package index is now stored separately from packages Fixed \u00b6 Parallel containers conflicting when writing package indexes 18.10.6 - 2018/10/23 \u00b6 Fixed \u00b6 Debuild now uses ~/.devscripts instead of hard-coding flags 18.10.5 - 2018/10/22 \u00b6 Fixed \u00b6 Pooling multiple changes files with one call to pool-packages 18.10.4 - 2018/10/19 \u00b6 Added \u00b6 New script for sorting packages into per-repository directories Changed \u00b6 Bump gbp-docker to 2.0.0 Build artifacts are deposited into /mnt container-side (instead of /mnt/pool/$DIST-$ARCH/src ) Local packages are indexed from /mnt (instead of /mnt/pool/$DIST-$ARCH ) Fixed \u00b6 Packages built with fakeroot debian/rules binary are now correctly indexed 18.10.3 - 2018/10/12 \u00b6 Changed \u00b6 Default upstream tag from v%(version)s to upstream/%(version)s 18.10.2 - 2018/10/10 \u00b6 Added \u00b6 --debug flag for building unstripped, unoptimized binaries. Sets DEB_BUILD_OPTIONS=\"nostrip noopt debug\" 18.10.1 - 2018/10/10 \u00b6 Added \u00b6 OPX Installer build support (see docs ) 18.10.0 - 2018/10/09 \u00b6 Added \u00b6 Changelog Documentation and docs site Changed \u00b6 Start using Calendar Versioning 0.7.1 - 2018/10/08 \u00b6 Added \u00b6 --no-extra-sources flag for testing fully-local builds Changed \u00b6 Default OPX apt sources are used if no extra sources are specified Extra source files now expect a .list suffix Docker images are not pulled if the --image flag contains a colon 0.6.1 - 2018/10/08 \u00b6 Changed \u00b6 Bump gbp-docker version to v1.0.5, which fixes lintian issues 0.6.0 - 2018/10/08 \u00b6 Added \u00b6 Controlgraph for resolving local build dependencies and the proper build order Removed \u00b6 Builddepends support 0.5.5 - 2018/09/12 \u00b6 Changed \u00b6 Upgrade gbp-docker to 1.0.3 0.5.4 - 2018/09/07 \u00b6 Added \u00b6 Progress bar when pulling Docker images 0.5.3 - 2018/09/06 \u00b6 Fixed \u00b6 Missing timezone and DEB email/name in container 0.5.2 - 2018/09/05 \u00b6 Changed \u00b6 Upgrade gbp-docker to 1.0.1 0.5.1 - 2018/09/05 \u00b6 Fixed \u00b6 Exception when ~/.gitconfig is missing 0.5.0 - 2018/09/04 \u00b6 Added \u00b6 Options for filtering isolated repositories when building 0.4.4 - 2018/09/04 \u00b6 Fixed \u00b6 Git-buildpackage option parsing 0.4.3 - 2018/09/04 \u00b6 Fixed \u00b6 Missing shell environment pieces due to non-login shell 0.4.2 - 2018/09/04 \u00b6 Fixed \u00b6 Duplicate bash -l in container command 0.4.1 - 2018/09/03 \u00b6 Fixed \u00b6 Missing user on container start 0.4.0 - 2018/09/02 \u00b6 Added \u00b6 Support for builddepends input 0.3.3 - 2018/08/29 \u00b6 Fixed \u00b6 Noisy output when starting/removing containers 0.3.2 - 2018/08/29 \u00b6 Fixed \u00b6 Missing bash arguments 0.3.1 - 2018/08/29 \u00b6 Added \u00b6 Everything","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Calendar Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#18121-20181212","text":"","title":"18.12.1 - 2018/12/12"},{"location":"changelog/#changed","text":"Docker entrypoint is run directly on shell/build","title":"Changed"},{"location":"changelog/#fixed","text":"Missing user build","title":"Fixed"},{"location":"changelog/#18115-20181129","text":"","title":"18.11.5 - 2018/11/29"},{"location":"changelog/#changed_1","text":"opx-build has been upgraded from installer/3.0.0 to installer/3.1.0","title":"Changed"},{"location":"changelog/#18114-20181126","text":"","title":"18.11.4 - 2018/11/26"},{"location":"changelog/#added","text":"Option to always remove any running container first","title":"Added"},{"location":"changelog/#changed_2","text":"Dbp log messages now to go stderr Use full name of directory for container name, not stem","title":"Changed"},{"location":"changelog/#fixed_1","text":"Missing user in container at runtime dbp shell returning 0 on error","title":"Fixed"},{"location":"changelog/#18113-20181119","text":"","title":"18.11.3 - 2018/11/19"},{"location":"changelog/#fixed_2","text":"Running command before container and user are ready","title":"Fixed"},{"location":"changelog/#removed","text":"Isolate ordering options for dbp build","title":"Removed"},{"location":"changelog/#18112-20181112","text":"","title":"18.11.2 - 2018/11/12"},{"location":"changelog/#added_1","text":"Subcommand for creating parallel Makefile","title":"Added"},{"location":"changelog/#changed_3","text":"debuild is only run for 3.0 (git) packages Shell process ID has been removed from container name","title":"Changed"},{"location":"changelog/#fixed_3","text":"Missing source tarball (now gbp buildpackage will run) dbp build and dbp shell now work from within repositories (not just the workspace)","title":"Fixed"},{"location":"changelog/#18111-20181107","text":"","title":"18.11.1 - 2018/11/07"},{"location":"changelog/#changed_4","text":"dbp build now runs debuild instead of gbp buildpackage to better support 3.0 (git) packages","title":"Changed"},{"location":"changelog/#fixed_4","text":"Return code of 0 on failed builds instead of !0","title":"Fixed"},{"location":"changelog/#18110-20181103","text":"","title":"18.11.0 - 2018/11/03"},{"location":"changelog/#fixed_5","text":"\"the input device is not a TTY\" Docker run and exec error","title":"Fixed"},{"location":"changelog/#18107-20181031","text":"","title":"18.10.7 - 2018/10/31"},{"location":"changelog/#added_2","text":"Ability to set container name with $CNAME environment variable","title":"Added"},{"location":"changelog/#changed_5","text":"Local package index is now stored separately from packages","title":"Changed"},{"location":"changelog/#fixed_6","text":"Parallel containers conflicting when writing package indexes","title":"Fixed"},{"location":"changelog/#18106-20181023","text":"","title":"18.10.6 - 2018/10/23"},{"location":"changelog/#fixed_7","text":"Debuild now uses ~/.devscripts instead of hard-coding flags","title":"Fixed"},{"location":"changelog/#18105-20181022","text":"","title":"18.10.5 - 2018/10/22"},{"location":"changelog/#fixed_8","text":"Pooling multiple changes files with one call to pool-packages","title":"Fixed"},{"location":"changelog/#18104-20181019","text":"","title":"18.10.4 - 2018/10/19"},{"location":"changelog/#added_3","text":"New script for sorting packages into per-repository directories","title":"Added"},{"location":"changelog/#changed_6","text":"Bump gbp-docker to 2.0.0 Build artifacts are deposited into /mnt container-side (instead of /mnt/pool/$DIST-$ARCH/src ) Local packages are indexed from /mnt (instead of /mnt/pool/$DIST-$ARCH )","title":"Changed"},{"location":"changelog/#fixed_9","text":"Packages built with fakeroot debian/rules binary are now correctly indexed","title":"Fixed"},{"location":"changelog/#18103-20181012","text":"","title":"18.10.3 - 2018/10/12"},{"location":"changelog/#changed_7","text":"Default upstream tag from v%(version)s to upstream/%(version)s","title":"Changed"},{"location":"changelog/#18102-20181010","text":"","title":"18.10.2 - 2018/10/10"},{"location":"changelog/#added_4","text":"--debug flag for building unstripped, unoptimized binaries. Sets DEB_BUILD_OPTIONS=\"nostrip noopt debug\"","title":"Added"},{"location":"changelog/#18101-20181010","text":"","title":"18.10.1 - 2018/10/10"},{"location":"changelog/#added_5","text":"OPX Installer build support (see docs )","title":"Added"},{"location":"changelog/#18100-20181009","text":"","title":"18.10.0 - 2018/10/09"},{"location":"changelog/#added_6","text":"Changelog Documentation and docs site","title":"Added"},{"location":"changelog/#changed_8","text":"Start using Calendar Versioning","title":"Changed"},{"location":"changelog/#071-20181008","text":"","title":"0.7.1 - 2018/10/08"},{"location":"changelog/#added_7","text":"--no-extra-sources flag for testing fully-local builds","title":"Added"},{"location":"changelog/#changed_9","text":"Default OPX apt sources are used if no extra sources are specified Extra source files now expect a .list suffix Docker images are not pulled if the --image flag contains a colon","title":"Changed"},{"location":"changelog/#061-20181008","text":"","title":"0.6.1 - 2018/10/08"},{"location":"changelog/#changed_10","text":"Bump gbp-docker version to v1.0.5, which fixes lintian issues","title":"Changed"},{"location":"changelog/#060-20181008","text":"","title":"0.6.0 - 2018/10/08"},{"location":"changelog/#added_8","text":"Controlgraph for resolving local build dependencies and the proper build order","title":"Added"},{"location":"changelog/#removed_1","text":"Builddepends support","title":"Removed"},{"location":"changelog/#055-20180912","text":"","title":"0.5.5 - 2018/09/12"},{"location":"changelog/#changed_11","text":"Upgrade gbp-docker to 1.0.3","title":"Changed"},{"location":"changelog/#054-20180907","text":"","title":"0.5.4 - 2018/09/07"},{"location":"changelog/#added_9","text":"Progress bar when pulling Docker images","title":"Added"},{"location":"changelog/#053-20180906","text":"","title":"0.5.3 - 2018/09/06"},{"location":"changelog/#fixed_10","text":"Missing timezone and DEB email/name in container","title":"Fixed"},{"location":"changelog/#052-20180905","text":"","title":"0.5.2 - 2018/09/05"},{"location":"changelog/#changed_12","text":"Upgrade gbp-docker to 1.0.1","title":"Changed"},{"location":"changelog/#051-20180905","text":"","title":"0.5.1 - 2018/09/05"},{"location":"changelog/#fixed_11","text":"Exception when ~/.gitconfig is missing","title":"Fixed"},{"location":"changelog/#050-20180904","text":"","title":"0.5.0 - 2018/09/04"},{"location":"changelog/#added_10","text":"Options for filtering isolated repositories when building","title":"Added"},{"location":"changelog/#044-20180904","text":"","title":"0.4.4 - 2018/09/04"},{"location":"changelog/#fixed_12","text":"Git-buildpackage option parsing","title":"Fixed"},{"location":"changelog/#043-20180904","text":"","title":"0.4.3 - 2018/09/04"},{"location":"changelog/#fixed_13","text":"Missing shell environment pieces due to non-login shell","title":"Fixed"},{"location":"changelog/#042-20180904","text":"","title":"0.4.2 - 2018/09/04"},{"location":"changelog/#fixed_14","text":"Duplicate bash -l in container command","title":"Fixed"},{"location":"changelog/#041-20180903","text":"","title":"0.4.1 - 2018/09/03"},{"location":"changelog/#fixed_15","text":"Missing user on container start","title":"Fixed"},{"location":"changelog/#040-20180902","text":"","title":"0.4.0 - 2018/09/02"},{"location":"changelog/#added_11","text":"Support for builddepends input","title":"Added"},{"location":"changelog/#033-20180829","text":"","title":"0.3.3 - 2018/08/29"},{"location":"changelog/#fixed_16","text":"Noisy output when starting/removing containers","title":"Fixed"},{"location":"changelog/#032-20180829","text":"","title":"0.3.2 - 2018/08/29"},{"location":"changelog/#fixed_17","text":"Missing bash arguments","title":"Fixed"},{"location":"changelog/#031-20180829","text":"","title":"0.3.1 - 2018/08/29"},{"location":"changelog/#added_12","text":"Everything","title":"Added"},{"location":"comparison/","text":"Docker-buildpackage and opx-build \u00b6 dbp is replacing opx-build to support more OS distributions, increase developer productivity, and lower operational overhead. opx-build contains scripts for running the OPX Docker image opxhub/build ( opx_run ), building Debian packages with Git-buildpackage ( opx_build ), and building an OpenSwitch installer ( opx_rel_pkgasm.py ). On opx-build and build isolation \u00b6 opx-build uses git-buildpackage / git-pbuilder / cowbuilder for building packages. This provides clean environments for every build, but is also rather redundant with the Docker image we provide. dbp resolves this issue by removing git-pbuilder / cowbuilder and running builds in the container directly. This also brings the added benefit of simplified environment management, as we can build one image per distribution, instead of one image containing every distribution. On opx-build and container persistence \u00b6 With opx-build , the container is removed after every build. Developers are forced to manually run containers and execute shell sessions within them. dbp is built from the ground up around this workflow, supporting persistent containers and multiple shell sessions. dbp and backwards compatibility \u00b6 dbp maintains some backwards compatibility with opx-build . opx_build does not work without pbuilder , and opx_run does not work without Docker-in-Docker. The installer/3.0.0 tag of opx-build is installed into /usr/local/opx-build and /usr/local/opx-build/scripts has been added to the $PATH to support installer building. 1 2 $ dbp shell -c 'which opx_rel_pkgasm.py' /usr/local/opx-build/scripts/opx_rel_pkgasm.py Command Comparison \u00b6 Build a single package 1 2 3 $ opx-build/scripts/opx_run opx_build src1 $ dbp build src1 Build all packages in a directory 1 2 3 $ opx-build/scripts/opx_run opx_build src1 src2 src3... $ dbp build Build an OPX installer 1 2 3 4 5 $ opx-build/scripts/opx_run opx_rel_pkgasm.py --dist stable \\ -b opx-onie-installer/release_bp/OPX_dell_base_stretch.xml $ dbp shell -c 'opx_rel_pkgasm.py --dist stable \\ -b opx-onie-installer/release_bp/OPX_dell_base_stretch.xml'","title":"Comparison with opx-build"},{"location":"comparison/#docker-buildpackage-and-opx-build","text":"dbp is replacing opx-build to support more OS distributions, increase developer productivity, and lower operational overhead. opx-build contains scripts for running the OPX Docker image opxhub/build ( opx_run ), building Debian packages with Git-buildpackage ( opx_build ), and building an OpenSwitch installer ( opx_rel_pkgasm.py ).","title":"Docker-buildpackage and opx-build"},{"location":"comparison/#on-opx-build-and-build-isolation","text":"opx-build uses git-buildpackage / git-pbuilder / cowbuilder for building packages. This provides clean environments for every build, but is also rather redundant with the Docker image we provide. dbp resolves this issue by removing git-pbuilder / cowbuilder and running builds in the container directly. This also brings the added benefit of simplified environment management, as we can build one image per distribution, instead of one image containing every distribution.","title":"On opx-build and build isolation"},{"location":"comparison/#on-opx-build-and-container-persistence","text":"With opx-build , the container is removed after every build. Developers are forced to manually run containers and execute shell sessions within them. dbp is built from the ground up around this workflow, supporting persistent containers and multiple shell sessions.","title":"On opx-build and container persistence"},{"location":"comparison/#dbp-and-backwards-compatibility","text":"dbp maintains some backwards compatibility with opx-build . opx_build does not work without pbuilder , and opx_run does not work without Docker-in-Docker. The installer/3.0.0 tag of opx-build is installed into /usr/local/opx-build and /usr/local/opx-build/scripts has been added to the $PATH to support installer building. 1 2 $ dbp shell -c 'which opx_rel_pkgasm.py' /usr/local/opx-build/scripts/opx_rel_pkgasm.py","title":"dbp and backwards compatibility"},{"location":"comparison/#command-comparison","text":"Build a single package 1 2 3 $ opx-build/scripts/opx_run opx_build src1 $ dbp build src1 Build all packages in a directory 1 2 3 $ opx-build/scripts/opx_run opx_build src1 src2 src3... $ dbp build Build an OPX installer 1 2 3 4 5 $ opx-build/scripts/opx_run opx_rel_pkgasm.py --dist stable \\ -b opx-onie-installer/release_bp/OPX_dell_base_stretch.xml $ dbp shell -c 'opx_rel_pkgasm.py --dist stable \\ -b opx-onie-installer/release_bp/OPX_dell_base_stretch.xml'","title":"Command Comparison"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 What is happening with opx-build? \u00b6 OpenSwitch will continue to support the opx_build script from the opx-build repository for building OPX Debian packages and the OPX installer. opx-build currently supports building Debian packages for both Debian Jessie and Debian Stretch. Tip opx-build will be continue to be supported as long as OPX ships on Debian Stretch. How do I generate a debian/changelog entry? \u00b6 1 $ dbp shell -c \"cd src/; gbp dch -R\" An editor will be opened where you can edit the changelog entry. Simply commit the changes and raise a pull request! What is the install-build-deps program? \u00b6 install-build-deps is a shell script which indexes local packages, adds your extra sources, then installs build dependencies. It is run automatically when using gbp buildpackage or build . Skip running it with dbp build --gbp=\"--git-prebuild=':'\" . What is the pool-packages program? \u00b6 pool-packages reads a Debian changes file and moves all associated files into ./pool/ ${ DIST } - ${ ARCH } /src . It is useful for sharing packages. Why am I receiving unable to find user build ? \u00b6 Docker could be too slow (or it could be storage). Either way, the container is taking too long to start. Try running dbp run first before running a build or shell.","title":"FAQs"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#what-is-happening-with-opx-build","text":"OpenSwitch will continue to support the opx_build script from the opx-build repository for building OPX Debian packages and the OPX installer. opx-build currently supports building Debian packages for both Debian Jessie and Debian Stretch. Tip opx-build will be continue to be supported as long as OPX ships on Debian Stretch.","title":"What is happening with opx-build?"},{"location":"faq/#how-do-i-generate-a-debianchangelog-entry","text":"1 $ dbp shell -c \"cd src/; gbp dch -R\" An editor will be opened where you can edit the changelog entry. Simply commit the changes and raise a pull request!","title":"How do I generate a debian/changelog entry?"},{"location":"faq/#what-is-the-install-build-deps-program","text":"install-build-deps is a shell script which indexes local packages, adds your extra sources, then installs build dependencies. It is run automatically when using gbp buildpackage or build . Skip running it with dbp build --gbp=\"--git-prebuild=':'\" .","title":"What is the install-build-deps program?"},{"location":"faq/#what-is-the-pool-packages-program","text":"pool-packages reads a Debian changes file and moves all associated files into ./pool/ ${ DIST } - ${ ARCH } /src . It is useful for sharing packages.","title":"What is the pool-packages program?"},{"location":"faq/#why-am-i-receiving-unable-to-find-user-build","text":"Docker could be too slow (or it could be storage). Either way, the container is taking too long to start. Try running dbp run first before running a build or shell.","title":"Why am I receiving unable to find user build?"},{"location":"forking-upstream/","text":"Forking from an Upstream \u00b6 Depending on your upstream, there are three main ways of interacting with Debian package repositories: No upstream: Debian native package Upstream is Debian (or a Debian downstream like Ubuntu) Upstream is not Debian Upstream type determines how our package versions are bumped. Version examples: Upstream type Upstream version Upstream tag Release tag not Debian 4.5.6 v4.5.6 debian/4.5.6-0opx1 Debian 4.5.6-2 debian/4.5.6-2 debian/4.5.6-2opx1 Ubuntu 4.5.6-2ubuntu3 debian/4.5.6-2ubuntu3 debian/4.5.6-2ubuntu3opx1 Debian native package \u00b6 Develop on master Release on debian/X.Y.Z tags Upstream is Debian \u00b6 Development is done on the opx/master branch. Development is done through Debian patches with gbp pq . Workflow for new upstream versions \u00b6 Merge upstream (Debian) tag into opx/master branch. Resolve conflicts Create/adapt packaging Add changelog entry with gbp dch Reset opxX to opx1 Raise pull request Merge, tag, and release Workflow for new OPX changes \u00b6 Follow normal OPX workflow, forking from opx/master Import patches with gbp pq import Make changes (to source only, no packaging) Export patches with gbp pq export Create/adapt packaging Add changelog entry with gbp dch (keep same upstream version, only increment final opxX Raise pull request Merge, tag, and release Upstream is not Debian \u00b6 Development is done on the opx/master branch. No patches or patch queues are used. Workflow for new upstream versions \u00b6 Merge upstream tag into opx/master branch. Resolve conflicts Create/adapt packaging Add changelog entry with gbp dch Reset opxX to opx1 Raise pull request Merge Tag and release Workflow for new OPX changes \u00b6 Follow normal OPX workflow, forking from opx/master Make changes Create/adapt packaging Add changelog entry with gbp dch (keep same upstream version, only increment final opxX Raise pull request Merge Tag and release Upstream is a tarball \u00b6 Create repo with gbp import-orig Create packaging with dh_make Add, modify, and remove patches with gbp pq import and gbp pq export Import new upstream versions with gbp import-orig --uscan Demo of creating a Debian fork and an initial release \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 PKG = net-snmp UPSTREAM = 5 .7.3+dfsg-1.7 OPX_VER = ${ UPSTREAM } opx1 git clone -o upstream https://salsa.debian.org/debian/net-snmp.git # Create our development branch git -C $PKG checkout -b opx/master debian/ $UPSTREAM # Create new changelog for initial OPX release # Add new changelog entry, changing 5.7.3+dfsg-2 to 5.7.3+dfsg-1.7opx1 dbp shell -c \"cd $PKG ; gbp dch --release\" git -C $PKG add debian/changelog # Commit our changes git -C $PKG commit -sm 'Initial commit for OPX' # Build it! And tag it on successful build dbp --dist stretch --no-extra-sources build $PKG --gbp = '--git-tag' # Push our changes and remove the repo git -C $PKG remote add origin https://github.com/theucke/net-snmp git -C $PKG push origin opx/master git -C $PKG push origin debian/ $OPX_VER rm -rf $PKG Demo of modifying the Debian fork \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Clone from our fork git clone https://github.com/theucke/net-snmp git -C $PKG checkout opx/master # Create dev branch git -C $PKG checkout --track opx/master -b bugfix/python-indentation # Import patch queue dbp shell -c \"cd $PKG ; gbp pq import\" # Fix tab character in python file for something to change sed -i $'s/\\t/ /' $PKG /python/setup.py git -C $PKG add python/setup.py # Commit changes and export patch queue git -C $PKG commit -asm \"python: Fix indentation\" dbp shell -c \"cd $PKG ; gbp pq export\" # Add new changelog entry, changing 5.7.3+dfsg-1.7opx1 to 5.7.3+dfsg-1.7opx2 # Version should be changed automatically for you dbp shell -c \"cd $PKG ; gbp dch --release\" git -C $PKG commit --amend -a # Raise pull request git pull-request Demo of merging in new upstream release \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Clone from our fork git clone https://github.com/theucke/net-snmp git -C $PKG checkout opx/master # Import new upstream version and resolve conflicts # Move new changelog entry to Debian changelog (must be a better way, Git didn't detect rename) git -C $PKG merge debian/5.7.3+dfsg-1.8 # Add new changelog entry, changing 5.7.3+dfsg-1.7opx2 to 5.7.3+dfsg-1.8opx1 dbp shell -c \"cd $PKG ; gbp dch --release\" git -C $PKG commit --amend -a # Build for verification (normally CI will do this) dbp --dist stretch --no-extra-sources build $PKG --gbp = '--git-tag' # Push our new tag git -C $PKG push origin opx/master git -C $PKG push origin debian/5.7.3+dfsg-1.8opx1","title":"Forking Upstream"},{"location":"forking-upstream/#forking-from-an-upstream","text":"Depending on your upstream, there are three main ways of interacting with Debian package repositories: No upstream: Debian native package Upstream is Debian (or a Debian downstream like Ubuntu) Upstream is not Debian Upstream type determines how our package versions are bumped. Version examples: Upstream type Upstream version Upstream tag Release tag not Debian 4.5.6 v4.5.6 debian/4.5.6-0opx1 Debian 4.5.6-2 debian/4.5.6-2 debian/4.5.6-2opx1 Ubuntu 4.5.6-2ubuntu3 debian/4.5.6-2ubuntu3 debian/4.5.6-2ubuntu3opx1","title":"Forking from an Upstream"},{"location":"forking-upstream/#debian-native-package","text":"Develop on master Release on debian/X.Y.Z tags","title":"Debian native package"},{"location":"forking-upstream/#upstream-is-debian","text":"Development is done on the opx/master branch. Development is done through Debian patches with gbp pq .","title":"Upstream is Debian"},{"location":"forking-upstream/#workflow-for-new-upstream-versions","text":"Merge upstream (Debian) tag into opx/master branch. Resolve conflicts Create/adapt packaging Add changelog entry with gbp dch Reset opxX to opx1 Raise pull request Merge, tag, and release","title":"Workflow for new upstream versions"},{"location":"forking-upstream/#workflow-for-new-opx-changes","text":"Follow normal OPX workflow, forking from opx/master Import patches with gbp pq import Make changes (to source only, no packaging) Export patches with gbp pq export Create/adapt packaging Add changelog entry with gbp dch (keep same upstream version, only increment final opxX Raise pull request Merge, tag, and release","title":"Workflow for new OPX changes"},{"location":"forking-upstream/#upstream-is-not-debian","text":"Development is done on the opx/master branch. No patches or patch queues are used.","title":"Upstream is not Debian"},{"location":"forking-upstream/#workflow-for-new-upstream-versions_1","text":"Merge upstream tag into opx/master branch. Resolve conflicts Create/adapt packaging Add changelog entry with gbp dch Reset opxX to opx1 Raise pull request Merge Tag and release","title":"Workflow for new upstream versions"},{"location":"forking-upstream/#workflow-for-new-opx-changes_1","text":"Follow normal OPX workflow, forking from opx/master Make changes Create/adapt packaging Add changelog entry with gbp dch (keep same upstream version, only increment final opxX Raise pull request Merge Tag and release","title":"Workflow for new OPX changes"},{"location":"forking-upstream/#upstream-is-a-tarball","text":"Create repo with gbp import-orig Create packaging with dh_make Add, modify, and remove patches with gbp pq import and gbp pq export Import new upstream versions with gbp import-orig --uscan","title":"Upstream is a tarball"},{"location":"forking-upstream/#demo-of-creating-a-debian-fork-and-an-initial-release","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 PKG = net-snmp UPSTREAM = 5 .7.3+dfsg-1.7 OPX_VER = ${ UPSTREAM } opx1 git clone -o upstream https://salsa.debian.org/debian/net-snmp.git # Create our development branch git -C $PKG checkout -b opx/master debian/ $UPSTREAM # Create new changelog for initial OPX release # Add new changelog entry, changing 5.7.3+dfsg-2 to 5.7.3+dfsg-1.7opx1 dbp shell -c \"cd $PKG ; gbp dch --release\" git -C $PKG add debian/changelog # Commit our changes git -C $PKG commit -sm 'Initial commit for OPX' # Build it! And tag it on successful build dbp --dist stretch --no-extra-sources build $PKG --gbp = '--git-tag' # Push our changes and remove the repo git -C $PKG remote add origin https://github.com/theucke/net-snmp git -C $PKG push origin opx/master git -C $PKG push origin debian/ $OPX_VER rm -rf $PKG","title":"Demo of creating a Debian fork and an initial release"},{"location":"forking-upstream/#demo-of-modifying-the-debian-fork","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Clone from our fork git clone https://github.com/theucke/net-snmp git -C $PKG checkout opx/master # Create dev branch git -C $PKG checkout --track opx/master -b bugfix/python-indentation # Import patch queue dbp shell -c \"cd $PKG ; gbp pq import\" # Fix tab character in python file for something to change sed -i $'s/\\t/ /' $PKG /python/setup.py git -C $PKG add python/setup.py # Commit changes and export patch queue git -C $PKG commit -asm \"python: Fix indentation\" dbp shell -c \"cd $PKG ; gbp pq export\" # Add new changelog entry, changing 5.7.3+dfsg-1.7opx1 to 5.7.3+dfsg-1.7opx2 # Version should be changed automatically for you dbp shell -c \"cd $PKG ; gbp dch --release\" git -C $PKG commit --amend -a # Raise pull request git pull-request","title":"Demo of modifying the Debian fork"},{"location":"forking-upstream/#demo-of-merging-in-new-upstream-release","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Clone from our fork git clone https://github.com/theucke/net-snmp git -C $PKG checkout opx/master # Import new upstream version and resolve conflicts # Move new changelog entry to Debian changelog (must be a better way, Git didn't detect rename) git -C $PKG merge debian/5.7.3+dfsg-1.8 # Add new changelog entry, changing 5.7.3+dfsg-1.7opx2 to 5.7.3+dfsg-1.8opx1 dbp shell -c \"cd $PKG ; gbp dch --release\" git -C $PKG commit --amend -a # Build for verification (normally CI will do this) dbp --dist stretch --no-extra-sources build $PKG --gbp = '--git-tag' # Push our new tag git -C $PKG push origin opx/master git -C $PKG push origin debian/5.7.3+dfsg-1.8opx1","title":"Demo of merging in new upstream release"},{"location":"installation/","text":"Installation \u00b6 Prerequisites \u00b6 Python 3.5+ Docker Install \u00b6 1 $ pip3 install --upgrade dbp To avoid installing into the global namespace, install into a virtualenv. 1 2 $ python3 -mvenv ~/.dbp && ~/.dbp/bin/pip install dbp $ export PATH = $PATH : $HOME /.dbp/bin","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#prerequisites","text":"Python 3.5+ Docker","title":"Prerequisites"},{"location":"installation/#install","text":"1 $ pip3 install --upgrade dbp To avoid installing into the global namespace, install into a virtualenv. 1 2 $ python3 -mvenv ~/.dbp && ~/.dbp/bin/pip install dbp $ export PATH = $PATH : $HOME /.dbp/bin","title":"Install"}]}