{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docker-buildpackage Documentation \u00b6 Docker-buildpackage is a tool for building Debian packages. Prerequisites \u00b6 Python 3.5+ Docker Install \u00b6 1 pip3 install dbp Usage \u00b6 dbp build runs an out-of-tree build and stores build artifacts in ./pool/ for easy publishing dbp shell launches an interactive bash shell in the development environment container dbp run starts a persistent container in the background dbp rm removes the persistent container from the background dbp uses OpenSwitch apt sources 1 if no other sources are specified. Both dbp build and dbp shell use temporary containers if no container exists. 1 2 deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx \u21a9","title":"Home"},{"location":"#docker-buildpackage-documentation","text":"Docker-buildpackage is a tool for building Debian packages.","title":"Docker-buildpackage Documentation"},{"location":"#prerequisites","text":"Python 3.5+ Docker","title":"Prerequisites"},{"location":"#install","text":"1 pip3 install dbp","title":"Install"},{"location":"#usage","text":"dbp build runs an out-of-tree build and stores build artifacts in ./pool/ for easy publishing dbp shell launches an interactive bash shell in the development environment container dbp run starts a persistent container in the background dbp rm removes the persistent container from the background dbp uses OpenSwitch apt sources 1 if no other sources are specified. Both dbp build and dbp shell use temporary containers if no container exists. 1 2 deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx \u21a9","title":"Usage"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 What is happening with opx-build? \u00b6 OpenSwitch will continue to support the opx_build script from the opx-build repository for building OPX Debian packages and the OPX installer. opx-build currently supports building Debian packages for both Debian Jessie and Debian Stretch. Tip opx-build will be continue to be supported as long as OPX ships on Debian Stretch. How do I generate a debian/changelog entry? \u00b6 1 $ dbp shell -c \"cd src/; gbp dch -R\" An editor will be opened where you can edit the changelog entry. Simply commit the changes and raise a pull request! What is the build program? \u00b6 build is a simple shell script which cd s into the source directory and runs gbp buildpackage with the --git-export-dir flag. This sorts build artifacts into per-source package directories. 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env bash set -euo pipefail if [[ $# -gt 0 ]] ; then cd \" $1 \" NAME = \" $1 \" shift else NAME = \" $( basename \" $( pwd ) \" ) \" fi gbp buildpackage --git-export-dir = \"/mnt/pool/ ${ DIST } - ${ ARCH } / ${ NAME } \" \" $@ \" What is the install-build-deps program? \u00b6 install-build-deps is a shell script which indexes local packages, adds your extra sources, then installs build dependencies. It is run automatically when using gbp buildpackage or build . Skip running it with dbp build --gbp=\"--git-prebuild=':'\" . Why am I receiving unable to find user build ? \u00b6 Docker could be too slow (or it could be storage). Either way, the container is taking too long to start. Try running dbp run first before running a build or shell.","title":"FAQs"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#what-is-happening-with-opx-build","text":"OpenSwitch will continue to support the opx_build script from the opx-build repository for building OPX Debian packages and the OPX installer. opx-build currently supports building Debian packages for both Debian Jessie and Debian Stretch. Tip opx-build will be continue to be supported as long as OPX ships on Debian Stretch.","title":"What is happening with opx-build?"},{"location":"faq/#how-do-i-generate-a-debianchangelog-entry","text":"1 $ dbp shell -c \"cd src/; gbp dch -R\" An editor will be opened where you can edit the changelog entry. Simply commit the changes and raise a pull request!","title":"How do I generate a debian/changelog entry?"},{"location":"faq/#what-is-the-build-program","text":"build is a simple shell script which cd s into the source directory and runs gbp buildpackage with the --git-export-dir flag. This sorts build artifacts into per-source package directories. 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env bash set -euo pipefail if [[ $# -gt 0 ]] ; then cd \" $1 \" NAME = \" $1 \" shift else NAME = \" $( basename \" $( pwd ) \" ) \" fi gbp buildpackage --git-export-dir = \"/mnt/pool/ ${ DIST } - ${ ARCH } / ${ NAME } \" \" $@ \"","title":"What is the build program?"},{"location":"faq/#what-is-the-install-build-deps-program","text":"install-build-deps is a shell script which indexes local packages, adds your extra sources, then installs build dependencies. It is run automatically when using gbp buildpackage or build . Skip running it with dbp build --gbp=\"--git-prebuild=':'\" .","title":"What is the install-build-deps program?"},{"location":"faq/#why-am-i-receiving-unable-to-find-user-build","text":"Docker could be too slow (or it could be storage). Either way, the container is taking too long to start. Try running dbp run first before running a build or shell.","title":"Why am I receiving unable to find user build?"},{"location":"commands/build/","text":"Commands: dbp build \u00b6 Out of the box, dbp build reads all directories and builds a graph of Debian build dependencies, which it traverses while building each Debian package. These packages are sorted into a pool and used for subsequent builds and ultimately publishing. Build a single package in a non-persistent container \u00b6 1 dbp build src/ Builds artifacts for the default Debian distribution Uses packages found in ./pool/stretch-amd64 as build dependencies Deposits artifacts in ./pool/stretch-amd64/src/ If workspace container does not exist, a container is created for this build and destroyed after If the workspace container already exists, it is used for the build and not destroyed after Build multiple repositories \u00b6 With no directories specified, dbp will build in build dependency order. 1 dbp build Otherwise, directories can be manually specified. 1 dbp build src new-src amazing-src Build against an OPX release \u00b6 1 dbp --release 3 .0.0 build Build against a Debian distribution \u00b6 1 dbp --dist bionic build Build against extra apt sources \u00b6 dbp will read from the following list of inputs for extra apt sources. These sources must be in standard sources.list format. --extra-sources argument EXTRA_SOURCES environment variable ./.extra_sources.list file ~/.extra_sources.list file For example, fill ~/.extra_sources.list with 1 2 deb http://deb.openswitch.net/stretch stable opx opx-non-free deb-src http://deb.openswitch.net/stretch stable opx and dbp build will search OpenSwitch for build dependencies. 1 2 3 4 $ dbp -v build src INFO:dbp:Loaded extra sources: deb http://deb.openswitch.net/stretch stable opx opx-non-free deb-src http://deb.openswitch.net/stretch stable opx If no sources are found, the default OPX sources are used. Exclude custom apt sources \u00b6 Also excludes default OPX sources. Useful for ensuring a complete local build is possible. 1 dbp --no-extra-sources build Building unstripped and unoptimized binaries \u00b6 Set DEB_BUILD_OPTIONS='nostrip noopt debug' . You can use it with build , gbp buildpackage , and even fakeroot debian/rules binary . 1 2 3 4 5 6 7 8 9 10 11 12 $ dbp shell build@stretch:/mnt$ DEB_BUILD_OPTIONS = 'nostrip noopt debug' build opx-logging build@stretch:/mnt$ ll pool/stretch-amd64/opx-logging/python-opx-logging* -rw-r--r-- 1 build dialout 12K Aug 29 22 :03 pool/stretch-amd64/opx-logging/python-opx-logging_2.1.1_amd64.deb # Normally you'd get this build@stretch:/mnt/opx-logging$ cd .. build@stretch:/mnt$ rm -rf pool/ build@stretch:/mnt$ build opx-logging build@stretch:/mnt$ ll pool/stretch-amd64/opx-logging/python-opx-logging* -rw-r--r-- 1 build dialout 12K Aug 29 22 :07 pool/stretch-amd64/opx-logging/python-opx-logging-dbgsym_2.1.1_amd64.deb -rw-r--r-- 1 build dialout 4 .2K Aug 29 22 :07 pool/stretch-amd64/opx-logging/python-opx-logging_2.1.1_amd64.deb Pass additional git-buildpackage options \u00b6 For example, skip building when tagging by passing the correct flag. 1 dbp build src --gbp = \"--git-tag-only\" Build in (more) parallel \u00b6 You can override the default parallel level with a build option. Set N to any number >0. 1 DEB_BUILD_OPTIONS = 'parallel=N'","title":"Build"},{"location":"commands/build/#commands-dbp-build","text":"Out of the box, dbp build reads all directories and builds a graph of Debian build dependencies, which it traverses while building each Debian package. These packages are sorted into a pool and used for subsequent builds and ultimately publishing.","title":"Commands: dbp build"},{"location":"commands/build/#build-a-single-package-in-a-non-persistent-container","text":"1 dbp build src/ Builds artifacts for the default Debian distribution Uses packages found in ./pool/stretch-amd64 as build dependencies Deposits artifacts in ./pool/stretch-amd64/src/ If workspace container does not exist, a container is created for this build and destroyed after If the workspace container already exists, it is used for the build and not destroyed after","title":"Build a single package in a non-persistent container"},{"location":"commands/build/#build-multiple-repositories","text":"With no directories specified, dbp will build in build dependency order. 1 dbp build Otherwise, directories can be manually specified. 1 dbp build src new-src amazing-src","title":"Build multiple repositories"},{"location":"commands/build/#build-against-an-opx-release","text":"1 dbp --release 3 .0.0 build","title":"Build against an OPX release"},{"location":"commands/build/#build-against-a-debian-distribution","text":"1 dbp --dist bionic build","title":"Build against a Debian distribution"},{"location":"commands/build/#build-against-extra-apt-sources","text":"dbp will read from the following list of inputs for extra apt sources. These sources must be in standard sources.list format. --extra-sources argument EXTRA_SOURCES environment variable ./.extra_sources.list file ~/.extra_sources.list file For example, fill ~/.extra_sources.list with 1 2 deb http://deb.openswitch.net/stretch stable opx opx-non-free deb-src http://deb.openswitch.net/stretch stable opx and dbp build will search OpenSwitch for build dependencies. 1 2 3 4 $ dbp -v build src INFO:dbp:Loaded extra sources: deb http://deb.openswitch.net/stretch stable opx opx-non-free deb-src http://deb.openswitch.net/stretch stable opx If no sources are found, the default OPX sources are used.","title":"Build against extra apt sources"},{"location":"commands/build/#exclude-custom-apt-sources","text":"Also excludes default OPX sources. Useful for ensuring a complete local build is possible. 1 dbp --no-extra-sources build","title":"Exclude custom apt sources"},{"location":"commands/build/#building-unstripped-and-unoptimized-binaries","text":"Set DEB_BUILD_OPTIONS='nostrip noopt debug' . You can use it with build , gbp buildpackage , and even fakeroot debian/rules binary . 1 2 3 4 5 6 7 8 9 10 11 12 $ dbp shell build@stretch:/mnt$ DEB_BUILD_OPTIONS = 'nostrip noopt debug' build opx-logging build@stretch:/mnt$ ll pool/stretch-amd64/opx-logging/python-opx-logging* -rw-r--r-- 1 build dialout 12K Aug 29 22 :03 pool/stretch-amd64/opx-logging/python-opx-logging_2.1.1_amd64.deb # Normally you'd get this build@stretch:/mnt/opx-logging$ cd .. build@stretch:/mnt$ rm -rf pool/ build@stretch:/mnt$ build opx-logging build@stretch:/mnt$ ll pool/stretch-amd64/opx-logging/python-opx-logging* -rw-r--r-- 1 build dialout 12K Aug 29 22 :07 pool/stretch-amd64/opx-logging/python-opx-logging-dbgsym_2.1.1_amd64.deb -rw-r--r-- 1 build dialout 4 .2K Aug 29 22 :07 pool/stretch-amd64/opx-logging/python-opx-logging_2.1.1_amd64.deb","title":"Building unstripped and unoptimized binaries"},{"location":"commands/build/#pass-additional-git-buildpackage-options","text":"For example, skip building when tagging by passing the correct flag. 1 dbp build src --gbp = \"--git-tag-only\"","title":"Pass additional git-buildpackage options"},{"location":"commands/build/#build-in-more-parallel","text":"You can override the default parallel level with a build option. Set N to any number >0. 1 DEB_BUILD_OPTIONS = 'parallel=N'","title":"Build in (more) parallel"},{"location":"commands/rm/","text":"Commands: dbp rm \u00b6 dbp rm removes and container started by dbp run from the same directory. If no container exists, nothing is done. 1 2 3 4 5 6 7 $ dbp -vv rm [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker rm -f theucke-dbp-dbp","title":"Rm"},{"location":"commands/rm/#commands-dbp-rm","text":"dbp rm removes and container started by dbp run from the same directory. If no container exists, nothing is done. 1 2 3 4 5 6 7 $ dbp -vv rm [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker rm -f theucke-dbp-dbp","title":"Commands: dbp rm"},{"location":"commands/run/","text":"Commands: dbp run \u00b6 dbp run creates and starts a development container that can be used by both dbp build and dbp shell . It must be manually removed with dbp rm . 1 2 3 4 5 6 7 8 9 $ dbp -vv run [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker run -d -it --name = theucke-dbp-dbp --hostname = stretch -v = /neteng/theucke/opx/dbp:/mnt -v = /home/theucke/.gitconfig:/etc/skel/.gitconfig:ro -e = UID = 9438 -e = GID = 3000 -e = TZ = US/Pacific-New -e = DEBFULLNAME = Dell EMC -e = DEBEMAIL = ops-dev@lists.openswitch.net -e = EXTRA_SOURCES = deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx opxhub/gbp:v1.0.5-stretch-dev bash -l","title":"Run"},{"location":"commands/run/#commands-dbp-run","text":"dbp run creates and starts a development container that can be used by both dbp build and dbp shell . It must be manually removed with dbp rm . 1 2 3 4 5 6 7 8 9 $ dbp -vv run [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker run -d -it --name = theucke-dbp-dbp --hostname = stretch -v = /neteng/theucke/opx/dbp:/mnt -v = /home/theucke/.gitconfig:/etc/skel/.gitconfig:ro -e = UID = 9438 -e = GID = 3000 -e = TZ = US/Pacific-New -e = DEBFULLNAME = Dell EMC -e = DEBEMAIL = ops-dev@lists.openswitch.net -e = EXTRA_SOURCES = deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx opxhub/gbp:v1.0.5-stretch-dev bash -l","title":"Commands: dbp run"},{"location":"commands/shell/","text":"Commands: dbp shell \u00b6 dbp shell launches an interactive shell in a Debian development environment. This environment is provided by opx-infra/gbp-docker . If a container were previously launched with dbp run in the same directory, dbp shell would launch the shell in the existing container. This existing container is not removed when the shell exits. If no container exists, a new container is created and then destroyed after. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ dbp -vv shell [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker run -d -it --name = theucke-dbp-dbp --hostname = stretch -v = /neteng/theucke/opx/dbp:/mnt -v = /home/theucke/.gitconfig:/etc/skel/.gitconfig:ro -e = UID = 9438 -e = GID = 3000 -e = TZ = US/Pacific-New -e = DEBFULLNAME = Dell EMC -e = DEBEMAIL = ops-dev@lists.openswitch.net -e = EXTRA_SOURCES = deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx opxhub/gbp:v1.0.5-stretch-dev bash -l [ DEBUG ] Running docker exec -it --user = build -e = UID = 9438 -e = GID = 3000 -e = TZ = US/Pacific-New -e = DEBFULLNAME = Dell EMC -e = DEBEMAIL = ops-dev@lists.openswitch.net -e = EXTRA_SOURCES = deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx theucke-dbp-dbp bash -l build@stretch:/mnt$ exit logout [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker rm -f theucke-dbp-dbp Develop inside a persistent development container \u00b6 Using dbp run launches a persistent development container. This container will only be explicitly removed when dbp rm is run in the same directory. You can use dbp shell to enter this container, or dbp shell -c 'cmd' to run a command non-interactively. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 dbp run dbp shell # Now we are inside the container (denoted by $ prompt) $ cd src/ # Install build dependencies and build the package $ gbp buildpackage # Only install build dependencies $ install-build-deps # On failed builds, avoid the long gbp build time by quickly rebuilding $ fakeroot debian/rules build # Manually clean up $ fakeroot debian/rules clean # Add a new source for build dependencies by appending to the env var $ export EXTRA_SOURCES = \" $EXTRA_SOURCES deb http://deb.openswitch.net/stretch 3.0.0 opx opx-non-free\" # Run gbp buildpackage again to do a clean build, but this time skip installing build deps $ gbp buildpackage --git-prebuild = ':' # Run an \"official\" build (what the CI runs) $ cd /mnt $ build src # Build an unstripped, unoptimized binary (this also works with gbp and debian/rules) $ DEB_BUILD_OPTIONS = 'nostrip noopt debug' build src # Exit the container $ exit # Remove the container when finished (or use `dbp shell/build` again to re-enter the same container) dbp rm Note Packages are only indexed for build dependencies in pool/ ${ DIST } - ${ ARCH } / . Building with build ./src automatically deposits build artifacts into the correct directory for indexing. You can also simply copy .deb files into the directory.","title":"Shell"},{"location":"commands/shell/#commands-dbp-shell","text":"dbp shell launches an interactive shell in a Debian development environment. This environment is provided by opx-infra/gbp-docker . If a container were previously launched with dbp run in the same directory, dbp shell would launch the shell in the existing container. This existing container is not removed when the shell exits. If no container exists, a new container is created and then destroyed after. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ dbp -vv shell [ INFO ] Loaded extra sources: deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker run -d -it --name = theucke-dbp-dbp --hostname = stretch -v = /neteng/theucke/opx/dbp:/mnt -v = /home/theucke/.gitconfig:/etc/skel/.gitconfig:ro -e = UID = 9438 -e = GID = 3000 -e = TZ = US/Pacific-New -e = DEBFULLNAME = Dell EMC -e = DEBEMAIL = ops-dev@lists.openswitch.net -e = EXTRA_SOURCES = deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx opxhub/gbp:v1.0.5-stretch-dev bash -l [ DEBUG ] Running docker exec -it --user = build -e = UID = 9438 -e = GID = 3000 -e = TZ = US/Pacific-New -e = DEBFULLNAME = Dell EMC -e = DEBEMAIL = ops-dev@lists.openswitch.net -e = EXTRA_SOURCES = deb http://deb.openswitch.net/stretch unstable opx opx-non-free deb-src http://deb.openswitch.net/stretch unstable opx theucke-dbp-dbp bash -l build@stretch:/mnt$ exit logout [ DEBUG ] Running docker inspect theucke-dbp-dbp [ DEBUG ] Running docker rm -f theucke-dbp-dbp","title":"Commands: dbp shell"},{"location":"commands/shell/#develop-inside-a-persistent-development-container","text":"Using dbp run launches a persistent development container. This container will only be explicitly removed when dbp rm is run in the same directory. You can use dbp shell to enter this container, or dbp shell -c 'cmd' to run a command non-interactively. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 dbp run dbp shell # Now we are inside the container (denoted by $ prompt) $ cd src/ # Install build dependencies and build the package $ gbp buildpackage # Only install build dependencies $ install-build-deps # On failed builds, avoid the long gbp build time by quickly rebuilding $ fakeroot debian/rules build # Manually clean up $ fakeroot debian/rules clean # Add a new source for build dependencies by appending to the env var $ export EXTRA_SOURCES = \" $EXTRA_SOURCES deb http://deb.openswitch.net/stretch 3.0.0 opx opx-non-free\" # Run gbp buildpackage again to do a clean build, but this time skip installing build deps $ gbp buildpackage --git-prebuild = ':' # Run an \"official\" build (what the CI runs) $ cd /mnt $ build src # Build an unstripped, unoptimized binary (this also works with gbp and debian/rules) $ DEB_BUILD_OPTIONS = 'nostrip noopt debug' build src # Exit the container $ exit # Remove the container when finished (or use `dbp shell/build` again to re-enter the same container) dbp rm Note Packages are only indexed for build dependencies in pool/ ${ DIST } - ${ ARCH } / . Building with build ./src automatically deposits build artifacts into the correct directory for indexing. You can also simply copy .deb files into the directory.","title":"Develop inside a persistent development container"}]}